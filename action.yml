name: 'docker-build'
description: 'Build docker images'
author: 'Conventional Actions'
inputs:
  name:
    required: false
    description: 'name of binary/container'
  platforms:
    required: false
    description: 'comma-separated list of platforms to build'
    default: 'linux/amd64,linux/arm64'
  buildkitd-flags:
    required: false
    description: 'buildkitd flags to use'
    default: '--allow-insecure-entitlement network.host'
  build-args:
    description: "list of build-time variables"
    required: false
  snyk-token:
    required: false
    description: 'SNYK auth token'
    default: ''
  scan:
    required: false
    description: 'set to false to disable scan (default is true)'
    default: 'true'
  download-artifacts:
    required: false
    description: 'set to false to disable downloading artifacts'
    default: 'true'
  version-major:
    required: false
    description: 'major version number'
  version-minor:
    required: false
    description: 'minor version number'
  version-patch:
    required: false
    description: 'full path version number'
runs:
  using: composite
  steps:
  - name: Download docker artifact
    uses: actions/download-artifact@v3
    with:
      name: docker
      path: docker
  - name: Download ${{ inputs.name }} amd64 binary
    uses: actions/download-artifact@v3
    if: ${{ success() && inputs.download-artifacts != false }}
    with:
      name: ${{ inputs.name }}_linux_amd64
      path: .build/linux-amd64
  - name: Download ${{ inputs.name }} arm64 docker
    uses: actions/download-artifact@v3
    if: ${{ success() && inputs.download-artifacts != false }}
    with:
      name: ${{ inputs.name }}_linux_arm64
      path: .build/linux-arm64
  - name: Set up QEMU
    id: qemu
    uses: docker/setup-qemu-action@v2
    with:
      platforms: ${{ inputs.platforms }}
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v2
    with:
      buildkitd-flags: ${{ inputs.buildkitd-flags }}
  - name: Login to GitHub Container Registry
    uses: docker/login-action@v2
    with:
      registry: ghcr.io
      username: ${{ github.actor }}
      password: ${{ env.GITHUB_TOKEN }}
  - name: Build ${{ inputs.name }} container
    id: build
    if: ${{ success() && inputs.scan != false }}
    uses: docker/build-push-action@v3
    with:
      context: .
      file: docker/${{ inputs.name }}/Dockerfile
      push: false
      load: true
      allow: network.host
      cache-from: type=gha
      cache-to: type=gha,mode=max
      build-args: ${{ inputs.build-args }}
  - name: Scan ${{ inputs.name }} container
    uses: conventional-actions/docker-scan@v1
    if: ${{ success() && inputs.scan != false }}
    with:
      file: docker/${{ inputs.name }}/Dockerfile
      image: ${{ steps.build.outputs.imageid }}
      token: ${{ inputs.snyk-token }}
  - name: Metadata for ${{ inputs.name }}
    id: meta
    uses: docker/metadata-action@v4
    with:
      images: ghcr.io/${{ github.repository_owner }}/${{ inputs.name }}
      tags: |
        type=raw,value=latest
        type=raw,value=${{ inputs.version-major }}
        type=raw,value=${{ inputs.version-minor }}
        type=raw,value=${{ inputs.version-patch }}
  - name: Push ${{ inputs.name }} container
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    uses: docker/build-push-action@v3
    with:
      context: .
      file: docker/${{ inputs.name }}/Dockerfile
      push: true
      load: false
      allow: network.host
      cache-from: type=gha
      cache-to: type=gha,mode=max
      build-args: ${{ inputs.build-args }}
      platforms: ${{ inputs.platforms }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
branding:
  icon: anchor
  color: purple
